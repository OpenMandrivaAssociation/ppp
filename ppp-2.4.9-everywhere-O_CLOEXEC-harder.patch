diff -up ppp-ppp-2.5.0/pppd/eap.c.4~ ppp-ppp-2.5.0/pppd/eap.c
--- ppp-ppp-2.5.0/pppd/eap.c.4~	2023-03-18 09:11:05.000000000 +0000
+++ ppp-ppp-2.5.0/pppd/eap.c	2024-07-14 00:39:10.272634952 +0100
@@ -1542,7 +1542,7 @@ open_pn_file(mode_t modebits)
 
 	if ((path = name_of_pn_file()) == NULL)
 		return (-1);
-	fd = open(path, modebits, S_IRUSR | S_IWUSR);
+	fd = open(path, modebits, S_IRUSR | S_IWUSR | O_CLOEXEC);
 	err = errno;
 	free(path);
 	errno = err;
diff -up ppp-ppp-2.5.0/pppd/main.c.4~ ppp-ppp-2.5.0/pppd/main.c
--- ppp-ppp-2.5.0/pppd/main.c.4~	2024-07-14 00:39:10.272634952 +0100
+++ ppp-ppp-2.5.0/pppd/main.c	2024-07-14 00:42:14.942849985 +0100
@@ -479,7 +479,7 @@ main(int argc, char *argv[])
 	die(0);
 
     /* Make sure fds 0, 1, 2 are open to somewhere. */
-    fd_devnull = open(PPP_DEVNULL, O_RDWR);
+    fd_devnull = open(PPP_DEVNULL, O_RDWR|O_CLOEXEC);
     if (fd_devnull < 0)
 	fatal("Couldn't open %s: %m", PPP_DEVNULL);
     while (fd_devnull <= 2) {
@@ -1763,7 +1763,7 @@ device_script(char *program, int in, int
     if (log_to_fd >= 0)
 	errfd = log_to_fd;
     else
-	errfd = open(PPP_PATH_CONNERRS, O_WRONLY | O_APPEND | O_CREAT, 0644);
+	errfd = open(PPP_PATH_CONNERRS, O_WRONLY | O_APPEND | O_CREAT | O_CLOEXEC, 0644);
 
     ++conn_running;
     pid = ppp_safe_fork(in, out, errfd);
diff -up ppp-ppp-2.5.0/pppd/options.c.4~ ppp-ppp-2.5.0/pppd/options.c
--- ppp-ppp-2.5.0/pppd/options.c.4~	2024-07-14 00:39:10.272634952 +0100
+++ ppp-ppp-2.5.0/pppd/options.c	2024-07-14 00:42:40.042885910 +0100
@@ -1718,9 +1718,9 @@ setlogfile(char **argv)
 	ppp_option_error("unable to drop permissions to open %s: %m", *argv);
 	return 0;
     }
-    fd = open(*argv, O_WRONLY | O_APPEND | O_CREAT | O_EXCL, 0644);
+    fd = open(*argv, O_WRONLY | O_APPEND | O_CREAT | O_EXCL | O_CLOEXEC, 0644);
     if (fd < 0 && errno == EEXIST)
-	fd = open(*argv, O_WRONLY | O_APPEND);
+	fd = open(*argv, O_WRONLY | O_APPEND | O_CLOEXEC);
     err = errno;
     if (!privileged_option && seteuid(euid) == -1)
 	fatal("unable to regain privileges: %m");
diff -up ppp-ppp-2.5.0/pppd/sys-linux.c.4~ ppp-ppp-2.5.0/pppd/sys-linux.c
--- ppp-ppp-2.5.0/pppd/sys-linux.c.4~	2024-07-14 00:39:10.242634925 +0100
+++ ppp-ppp-2.5.0/pppd/sys-linux.c	2024-07-14 00:43:04.392922071 +0100
@@ -666,7 +666,7 @@ int ppp_generic_establish (int fd)
 	    goto err;
 	}
 	dbglog("using channel %d", chindex);
-	fd = open("/dev/ppp", O_RDWR);
+	fd = open("/dev/ppp", O_RDWR | O_CLOEXEC);
 	if (fd < 0) {
 	    error("Couldn't reopen /dev/ppp: %m");
 	    goto err;
@@ -904,7 +904,7 @@ static int make_ppp_unit(void)
 		dbglog("in make_ppp_unit, already had /dev/ppp open?");
 		close(ppp_dev_fd);
 	}
-	ppp_dev_fd = open("/dev/ppp", O_RDWR);
+	ppp_dev_fd = open("/dev/ppp", O_RDWR | O_CLOEXEC);
 	if (ppp_dev_fd < 0)
 		fatal("Couldn't open /dev/ppp: %m");
 	flags = fcntl(ppp_dev_fd, F_GETFL);
@@ -1025,7 +1025,7 @@ int bundle_attach(int ifnum)
 	if (!new_style_driver)
 		return -1;
 
-	master_fd = open("/dev/ppp", O_RDWR);
+	master_fd = open("/dev/ppp", O_RDWR | O_CLOEXEC);
 	if (master_fd < 0)
 		fatal("Couldn't open /dev/ppp: %m");
 	if (ioctl(master_fd, PPPIOCATTACH, &ifnum) < 0) {
@@ -2533,7 +2533,7 @@ int sifproxyarp (int unit, u_int32_t his
 	if (tune_kernel) {
 	    forw_path = path_to_procfs("/sys/net/ipv4/ip_forward");
 	    if (forw_path != 0) {
-		int fd = open(forw_path, O_WRONLY);
+		int fd = open(forw_path, O_WRONLY | O_CLOEXEC);
 		if (fd >= 0) {
 		    if (write(fd, "1", 1) != 1)
 			error("Couldn't enable IP forwarding: %m");
@@ -2878,7 +2878,7 @@ int ppp_check_kernel_support(void)
     sscanf(utsname.release, "%d.%d.%d", &osmaj, &osmin, &ospatch);
     kernel_version = KVERSION(osmaj, osmin, ospatch);
 
-    fd = open("/dev/ppp", O_RDWR);
+    fd = open("/dev/ppp", O_RDWR | O_CLOEXEC);
     if (fd >= 0) {
 	new_style_driver = 1;
 
@@ -3056,7 +3056,7 @@ void logwtmp (const char *line, const ch
 #if __GLIBC__ >= 2
     updwtmp(_PATH_WTMP, &ut);
 #else
-    wtmp = open(_PATH_WTMP, O_APPEND|O_WRONLY);
+    wtmp = open(_PATH_WTMP, O_APPEND|O_WRONLY|O_CLOEXEC);
     if (wtmp >= 0) {
 	flock(wtmp, LOCK_EX);
 
@@ -3280,7 +3280,7 @@ int sifaddr (int unit, u_int32_t our_adr
 	int fd;
 
 	path = path_to_procfs("/sys/net/ipv4/ip_dynaddr");
-	if (path != 0 && (fd = open(path, O_WRONLY)) >= 0) {
+	if (path != 0 && (fd = open(path, O_WRONLY | O_CLOEXEC)) >= 0) {
 	    if (write(fd, "1", 1) != 1)
 		error("Couldn't enable dynamic IP addressing: %m");
 	    close(fd);
@@ -3534,7 +3534,7 @@ get_pty(int *master_fdp, int *slave_fdp,
     /*
      * Try the unix98 way first.
      */
-    mfd = open("/dev/ptmx", O_RDWR);
+    mfd = open("/dev/ptmx", O_RDWR | O_CLOEXEC);
     if (mfd >= 0) {
 	int ptn;
 	if (ioctl(mfd, TIOCGPTN, &ptn) >= 0) {
@@ -3545,7 +3545,7 @@ get_pty(int *master_fdp, int *slave_fdp,
 	    if (ioctl(mfd, TIOCSPTLCK, &ptn) < 0)
 		warn("Couldn't unlock pty slave %s: %m", pty_name);
 #endif
-	    if ((sfd = open(pty_name, O_RDWR | O_NOCTTY)) < 0)
+	    if ((sfd = open(pty_name, O_RDWR | O_NOCTTY | O_CLOEXEC)) < 0)
 	    {
 		warn("Couldn't open pty slave %s: %m", pty_name);
 		close(mfd);
@@ -3559,10 +3559,10 @@ get_pty(int *master_fdp, int *slave_fdp,
 	for (i = 0; i < 64; ++i) {
 	    slprintf(pty_name, sizeof(pty_name), "/dev/pty%c%x",
 		     'p' + i / 16, i % 16);
-	    mfd = open(pty_name, O_RDWR, 0);
+	    mfd = open(pty_name, O_RDWR | O_CLOEXEC, 0);
 	    if (mfd >= 0) {
 		pty_name[5] = 't';
-		sfd = open(pty_name, O_RDWR | O_NOCTTY, 0);
+		sfd = open(pty_name, O_RDWR | O_NOCTTY | O_CLOEXEC, 0);
 		if (sfd >= 0) {
 		    ret = fchown(sfd, uid, -1);
 		    if (ret != 0) {
diff -up ppp-ppp-2.5.0/pppd/tdb.c.4~ ppp-ppp-2.5.0/pppd/tdb.c
--- ppp-ppp-2.5.0/pppd/tdb.c.4~	2023-03-18 09:11:05.000000000 +0000
+++ ppp-ppp-2.5.0/pppd/tdb.c	2024-07-14 00:39:10.272634952 +0100
@@ -1728,7 +1728,7 @@ TDB_CONTEXT *tdb_open_ex(const char *nam
 		goto internal;
 	}
 
-	if ((tdb->fd = open(name, open_flags, mode)) == -1) {
+	if ((tdb->fd = open(name, open_flags | O_CLOEXEC, mode)) == -1) {
 		TDB_LOG((tdb, 5, "tdb_open_ex: could not open file %s: %s\n",
 			 name, strerror(errno)));
 		goto fail;	/* errno set by open(2) */
@@ -1971,7 +1971,7 @@ int tdb_reopen(TDB_CONTEXT *tdb)
 	}
 	if (close(tdb->fd) != 0)
 		TDB_LOG((tdb, 0, "tdb_reopen: WARNING closing tdb->fd failed!\n"));
-	tdb->fd = open(tdb->name, tdb->open_flags & ~(O_CREAT|O_TRUNC), 0);
+	tdb->fd = open(tdb->name, (tdb->open_flags & ~(O_CREAT|O_TRUNC)) | O_CLOEXEC, 0);
 	if (tdb->fd == -1) {
 		TDB_LOG((tdb, 0, "tdb_reopen: open failed (%s)\n", strerror(errno)));
 		goto fail;
diff -up ppp-ppp-2.5.0/pppd/tty.c.4~ ppp-ppp-2.5.0/pppd/tty.c
--- ppp-ppp-2.5.0/pppd/tty.c.4~	2023-03-18 09:11:05.000000000 +0000
+++ ppp-ppp-2.5.0/pppd/tty.c	2024-07-14 00:43:23.952952011 +0100
@@ -621,7 +621,7 @@ int connect_tty(void)
 				ppp_set_status(EXIT_OPEN_FAILED);
 				goto errret;
 			}
-			real_ttyfd = open(devnam, O_NONBLOCK | O_RDWR, 0);
+			real_ttyfd = open(devnam, O_NONBLOCK | O_RDWR | O_CLOEXEC, 0);
 			err = errno;
 			if (prio < OPRIO_ROOT && seteuid(0) == -1)
 				fatal("Unable to regain privileges");
@@ -775,7 +775,7 @@ int connect_tty(void)
 	if (connector == NULL && modem && devnam[0] != 0) {
 		int i;
 		for (;;) {
-			if ((i = open(devnam, O_RDWR)) >= 0)
+			if ((i = open(devnam, O_RDWR | O_CLOEXEC)) >= 0)
 				break;
 			if (errno != EINTR) {
 				error("Failed to reopen %s: %m", devnam);
diff -up ppp-ppp-2.5.0/pppd/utils.c.4~ ppp-ppp-2.5.0/pppd/utils.c
--- ppp-ppp-2.5.0/pppd/utils.c.4~	2023-03-18 09:11:05.000000000 +0000
+++ ppp-ppp-2.5.0/pppd/utils.c	2024-07-14 00:44:08.363022779 +0100
@@ -843,14 +843,14 @@ lock(char *dev)
     slprintf(lock_file, sizeof(lock_file), "%s/LCK..%s", PPP_PATH_LOCKDIR, dev);
 #endif
 
-    while ((fd = open(lock_file, O_EXCL | O_CREAT | O_RDWR, 0644)) < 0) {
+    while ((fd = open(lock_file, O_EXCL | O_CREAT | O_RDWR | O_CLOEXEC, 0644)) < 0) {
 	if (errno != EEXIST) {
 	    error("Can't create lock file %s: %m", lock_file);
 	    break;
 	}
 
 	/* Read the lock file to find out who has the device locked. */
-	fd = open(lock_file, O_RDONLY, 0);
+	fd = open(lock_file, O_RDONLY | O_CLOEXEC, 0);
 	if (fd < 0) {
 	    if (errno == ENOENT) /* This is just a timing problem. */
 		continue;
@@ -933,7 +933,7 @@ relock(int pid)
 
     if (lock_file[0] == 0)
 	return -1;
-    fd = open(lock_file, O_WRONLY, 0);
+    fd = open(lock_file, O_WRONLY | O_CLOEXEC, 0);
     if (fd < 0) {
 	error("Couldn't reopen lock file %s: %m", lock_file);
 	lock_file[0] = 0;
